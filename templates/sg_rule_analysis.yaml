AWSTemplateFormatVersion: "2010-09-09"
Description: "Template to create resources for Security Group rules analysis"
Parameters:
  SgaVpcFlowLogBucket:
    Type: String
    Description: The arn of the VPC flow log bucket
Resources:

    SgaCloudWatchLogsPolicy:
        Type: AWS::IAM::ManagedPolicy
        Properties:
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
          Description: Managed policy for CloudWatch Logs for use with the Security Group Analysis Solution
          Path: "/"
    
    SgaStepFunctionIAMRole:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Principal:
                  Service:
                  - states.amazonaws.com
                Action: sts:AssumeRole
          Path: /
          ManagedPolicyArns:
            - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
            - !Ref SgaCloudWatchLogsPolicy
          Policies:
            - PolicyName: SgaSfLambdaInvokePolicy
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - lambda:InvokeFunction
                    Resource:
                      - !GetAtt SgaGetSgLambda.Arn
                      - !GetAtt SgaGetEniLambda.Arn
            - PolicyName: SgaSfCwlStepFunctions
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - logs:CreateLogDelivery
                      - logs:GetLogDelivery
                      - logs:UpdateLogDelivery
                      - logs:DeleteLogDelivery
                      - logs:ListLogDeliveries
                      - logs:PutResourcePolicy
                      - logs:DescribeResourcePolicies
                      - logs:DescribeLogGroups
                    Resource: "*"


    SgaEventBridgeIAMManagedPolicy:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            Path: "/service-role/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "states:StartExecution"
                            ],
                            "Resource": [
                                "${StepFunctionsStateMachine}"
                            ]
                        }
                    ]
                }

    SgaEventBridgeIAMRole:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Principal:
                  Service:
                  - events.amazonaws.com
                Action: sts:AssumeRole
          Path: /
          ManagedPolicyArns:
            - !Ref SgaEventBridgeIAMManagedPolicy

    StepFuncLogGroup:
        Type: "AWS::Logs::LogGroup"

    DynamoTableSGRules:
        Type: "AWS::DynamoDB::Table"
        Properties:
          BillingMode: PAY_PER_REQUEST
          GlobalSecondaryIndexes:
            - IndexName: groups
              KeySchema:
              - AttributeName: group_id
                KeyType: HASH 
              Projection:
                ProjectionType: ALL
          AttributeDefinitions:
            - AttributeName: id
              AttributeType: S
            - AttributeName: group_id
              AttributeType: S
          KeySchema:
            - AttributeName: id
              KeyType: HASH

    DynamoTableSGAnalysis:
        Type: "AWS::DynamoDB::Table"
        Properties:
          BillingMode: PAY_PER_REQUEST
          GlobalSecondaryIndexes:
            - IndexName: protocol
              KeySchema:
              - AttributeName: sg_id
                KeyType: HASH 
              - AttributeName: protocol
                KeyType: RANGE
              Projection:
                ProjectionType: ALL
          AttributeDefinitions:
            - AttributeName: sgr_flow_hash
              AttributeType: S
            - AttributeName: sg_id
              AttributeType: S
            - AttributeName: protocol
              AttributeType: S
          KeySchema:
            - AttributeName: sgr_flow_hash
              KeyType: HASH
      
    DynamoTableENIAnalysis:
        Type: "AWS::DynamoDB::Table"
        Properties:
          AttributeDefinitions:
            - AttributeName: id
              AttributeType: S
          KeySchema:
            - AttributeName: id
              KeyType: HASH
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5


    DynamoTableSortSG:
        Type: "AWS::DynamoDB::Table"
        Properties:
          BillingMode: PAY_PER_REQUEST
          AttributeDefinitions:
            - AttributeName: id
              AttributeType: S
          KeySchema:
            - AttributeName: id
              KeyType: HASH

    StepFunctionsStateMachine:
        Type: "AWS::StepFunctions::StateMachine"
        Properties:
            DefinitionString: !Sub |
                {
                  "StartAt": "ProcessItems",
                  "States": {
                    "ProcessItems": {
                      "Type": "Map",
                      "ItemsPath": "$.data",
                      "Iterator": {
                        "StartAt": "GetSG",
                        "States": {
                          "GetSG": {
                            "Type": "Task",
                            "Resource": "${SgaGetSgLambda.Arn}",
                            "InputPath": "$",
                            "Retry": [
                              {
                                "ErrorEquals": [
                                  "Lambda.ServiceException",
                                  "Lambda.AWSLambdaException",
                                  "Lambda.SdkClientException",
                                  "Lambda.TooManyRequestsException"
                                ],
                                "IntervalSeconds": 2,
                                "MaxAttempts": 6,
                                "BackoffRate": 2
                              }
                            ],
                            "Next": "GetENI",
                            "ResultPath": null
                          },
                          "GetENI": {
                            "Type": "Task",
                            "Resource": "${SgaGetEniLambda.Arn}",
                            "InputPath": "$",
                            "Retry": [
                              {
                                "ErrorEquals": [
                                  "Lambda.ServiceException",
                                  "Lambda.AWSLambdaException",
                                  "Lambda.SdkClientException",
                                  "Lambda.TooManyRequestsException"
                                ],
                                "IntervalSeconds": 2,
                                "MaxAttempts": 6,
                                "BackoffRate": 2
                              }
                            ],
                            "Next": "SortSGs",
                            "ResultPath": null
                          },
                          "SortSGs": {
                            "Type": "Task",
                            "Resource": "${SgaSortSGLambda.Arn}",
                            "InputPath": "$",
                            "Retry": [
                              {
                                "ErrorEquals": [
                                  "Lambda.ServiceException",
                                  "Lambda.AWSLambdaException",
                                  "Lambda.SdkClientException",
                                  "Lambda.TooManyRequestsException"
                                ],
                                "IntervalSeconds": 2,
                                "MaxAttempts": 6,
                                "BackoffRate": 2
                              }
                            ],
                            "Next": "QueryVPCFlowLogsSaveToS3",
                            "ResultPath": null
                          },
                          "QueryVPCFlowLogsSaveToS3": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::glue:startJobRun.sync",
                            "Parameters": {
                              "JobName": "${SgaStartAthenaQueryGlueJob}",
                              "Arguments": {
                                "--region.$": "$.region",
                                "--table.$": "$.table",
                                "--path.$": "$.path"
                              }
                            },
                            "Next": "ParseVPCFLowLogsSaveUsageCount",
                            "InputPath": "$",
                            "ResultPath": null
                          },
                          "ParseVPCFLowLogsSaveUsageCount": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::glue:startJobRun.sync",
                            "Parameters": {
                              "JobName": "${SgaParseFlowLogsGlueJob}",
                              "Arguments": {
                                "--region.$": "$.region",
                                "--table.$": "$.table",
                                "--path.$": "$.path"
                              }
                            },
                            "InputPath": "$",
                            "End": true
                          }
                        }
                      },
                      "End": true
                    }
                  }
                }
            RoleArn: !GetAtt SgaStepFunctionIAMRole.Arn
            StateMachineType: "STANDARD"
            LoggingConfiguration:
                Destinations: 
                  - CloudWatchLogsLogGroup: 
                        LogGroupArn: !GetAtt StepFuncLogGroup.Arn
                IncludeExecutionData: true
                Level: "ALL"
            
    EventsRule:
        Type: "AWS::Events::Rule"
        Properties:
            ScheduleExpression: "cron(30 * * * ? *)"
            State: "DISABLED"
            Targets: 
                - 
                  Arn:
                    Fn::GetAtt:
                      - StepFunctionsStateMachine
                      - Arn
                  Id: 'SgaStepFunction'
                  RoleArn: !GetAtt 
                    - SgaEventBridgeIAMRole
                    - Arn
                  Input: |-
                    {
                      "data": [
                        {
                          "AccountNo": "012345678901",
                          "region": "eu-west-2",
                          "table": "SomeGlueTable",
                          "path": "path/path"
                        }
                      ]
                    }
            EventBusName: "default"

    SgaStartAthenaQueryGlueJobIAMRole:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Principal:
                  Service: glue.amazonaws.com
                Action: sts:AssumeRole
          Path: /
          ManagedPolicyArns:
            - !Ref SgaCloudWatchLogsPolicy
          Policies:
            - PolicyName: GlueJobPolicy
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - athena:StartQueryExecution
                      - athena:GetQueryExecution
                      - athena:GetQueryResults
                      - glue:GetTable
                      - glue:GetPartitions
                    Resource: "*"
            - PolicyName: GlueJobS3Access
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - s3:Get*
                      - s3:List*
                      - s3:PutObject
                    Resource:
                      - !ImportValue sga-resources-bucket-arn
                      - !Join
                          - ''
                          - - !ImportValue sga-resources-bucket-arn
                            - "/*"
                      - !ImportValue sga-athena-bucket-arn
                      - !Join
                          - ''
                          - - !ImportValue sga-athena-bucket-arn
                            - "/*"
                      - !Ref SgaVpcFlowLogBucket
                      - !Join
                          - ''
                          - - !Ref SgaVpcFlowLogBucket
                            - "/*"

    SgaStartAthenaQueryGlueJob:
        Type: "AWS::Glue::Job"
        Properties:
            Description: "Job to run Athena query on VPC Flow logs and save to S3"
            Role: !GetAtt SgaStartAthenaQueryGlueJobIAMRole.Arn
            ExecutionProperty: 
                MaxConcurrentRuns: 1
            Command: 
                Name: "pythonshell"
                ScriptLocation: !Join
                                    - ''
                                    - - 's3://'
                                      - !ImportValue sga-resources-bucket-ref
                                      - '/scripts/'
                                      - 'query_athena.py'
                PythonVersion: "3.9"
            DefaultArguments: 
                --TempDir: !Join
                                - ''
                                - - 's3://'
                                  - !ImportValue sga-resources-bucket-ref
                                  - '/temporary/'
                --class: "GlueApp"
                --enable-glue-datacatalog: "true"
                --enable-job-insights: "false"
                --job-language: "python"
                --prebuilt-library-option: "prebuilt-library-enable"
                --region: !Ref "AWS::Region"
                --database: !ImportValue sga-glue-database-ref
                --table: "sg_analysis_rules_data_ks"
                --bucket: !ImportValue sga-athena-bucket-ref
                --path: "path"
            MaxRetries: 1
            Timeout: 2880
            GlueVersion: "1.0"
            MaxCapacity: 0.0625

    SgaParseFlowLogsGlueJobIAMRole:
        Type: "AWS::IAM::Role"
        Properties:
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Principal:
                  Service: glue.amazonaws.com
                Action: sts:AssumeRole
          Path: /
          ManagedPolicyArns:
            - !Ref SgaCloudWatchLogsPolicy
          Policies:
              - PolicyName: GlueJobS3Access
                PolicyDocument:
                    Version: '2012-10-17'
                    Statement:
                      - Effect: Allow
                        Action:
                          - s3:Get*
                          - s3:HeadObject
                          - s3:List*
                        Resource:
                          - !ImportValue sga-resources-bucket-arn
                          - !Join
                              - ''
                              - - !ImportValue sga-resources-bucket-arn
                                - "/*"
                          - !ImportValue sga-athena-bucket-arn
                          - !Join
                              - ''
                              - - !ImportValue sga-athena-bucket-arn
                                - "/*"
              - PolicyName: GlueJobDynamoDBPolicy
                PolicyDocument:
                  Version: '2012-10-17'
                  Statement:
                    - Effect: Allow
                      Action:
                        - dynamodb:Query
                        - dynamodb:GetItem
                      Resource:
                        - !GetAtt DynamoTableSGRules.Arn
                        - !Join
                            - ''
                            - - !GetAtt DynamoTableSGRules.Arn
                              - "/*"
                        - !GetAtt DynamoTableENIAnalysis.Arn
                        - !Join
                            - ''
                            - - !GetAtt DynamoTableENIAnalysis.Arn
                              - "/*"
              - PolicyName: GlueJobDynamoDBReadWritePolicy
                PolicyDocument:
                  Version: '2012-10-17'
                  Statement:
                    - Effect: Allow
                      Action:
                        - dynamodb:PutItem
                        - dynamodb:GetItem
                        - dynamodb:UpdateItem
                        - dynamodb:Query
                      Resource: 
                        - !GetAtt DynamoTableSGAnalysis.Arn
                        - !Join
                            - ''
                            - - !GetAtt DynamoTableSGAnalysis.Arn
                              - "/*"
    
    SgaParseFlowLogsGlueJob:
        Type: "AWS::Glue::Job"
        Properties:
            Description: "Job to parse flow logs and calculate usage"
            Role: !GetAtt SgaParseFlowLogsGlueJobIAMRole.Arn
            ExecutionProperty: 
                MaxConcurrentRuns: 1
            Command: 
                Name: "pythonshell"
                ScriptLocation: !Join
                                    - ''
                                    - - 's3://'
                                      - !ImportValue sga-resources-bucket-ref
                                      - '/scripts/'
                                      - 'flow_logs_parser.py'
                PythonVersion: "3.9"
            DefaultArguments: 
                --class: "GlueApp"
                --enable-job-insights: "false"
                --extra-py-files: !Join
                                    - ''
                                    - - 's3://'
                                      - !ImportValue sga-resources-bucket-ref
                                      - '/libraries/'
                                      - 'awswrangler-2.14.0-py3-none-any.whl'
                --job-language: "python"
                --region: !Ref "AWS::Region"
                --FlowLogsAthenaResultsBucket: !ImportValue sga-athena-bucket-ref
                --SGRulesTable: !Ref DynamoTableSGRules
                --SGRulesGroupIndex: "groups"
                --NICInterfaceTable: !Ref DynamoTableENIAnalysis
                --DynamoTableName: !Ref DynamoTableSGAnalysis
                --SGARulesUseIndex: "addr-id-index"
                --path: "vpcflowlogs"
            MaxRetries: 1
            Timeout: 2880
            GlueVersion: "3.0"
            MaxCapacity: 1

    SgaGetSgLambdaIAMRole:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Principal:
                  Service: lambda.amazonaws.com
                Action: sts:AssumeRole
          Path: /
          ManagedPolicyArns:
            - !Ref SgaCloudWatchLogsPolicy
          Policies:
            - PolicyName: DescribeSecurityGroupsPolicy
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - ec2:DescribeSecurityGroups
                      - ec2:DescribeSecurityGroupReferences
                      - ec2:DescribeSecurityGroupRules
                    Resource: "*"
            - PolicyName: DynamoDBPermissions
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - dynamodb:PutItem
                      - dynamodb:Query
                    Resource: !GetAtt DynamoTableSGRules.Arn
            - PolicyName: AssumeCrossAccountRole
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - sts:AssumeRole
                    Resource: arn:aws:iam::*:role/SgaCrossAccountSecurityGroupLambda

    SgaGetSgLambda:
      Type: "AWS::Lambda::Function"
      Properties:
        Role: !GetAtt SgaGetSgLambdaIAMRole.Arn
        Handler: lambda_function.lambda_handler
        Environment:
          Variables:
            DB_TABLE: !Ref DynamoTableSGRules
            # Define CROSS_ACCOUNT_ROLE_NAME here if you want to assume another role e.g. `ARN_ROLE: arn:aws:iam::<AccountNo>:role/<Role>`
            CROSS_ACCOUNT_ROLE_NAME: SgaCrossAccountSecurityGroupLambda
        Runtime: python3.10
        Timeout: 300
        Code:
          S3Bucket: !ImportValue sga-resources-bucket-ref
          S3Key: KS-Test-SgaGetSgLambda-FU23JMQzQK3h-b0d41471-bd70-4a45-9548-4fa7e8e2c158.zip

    SgaGetEniLambdaIAMRole:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Principal:
                  Service: lambda.amazonaws.com
                Action: sts:AssumeRole
          Path: /
          ManagedPolicyArns:
            - !Ref SgaCloudWatchLogsPolicy
          Policies:
            - PolicyName: DescribeSecurityGroupsPolicy
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - ec2:DescribeNetworkInterfaces
                      - ec2:DescribeTags
                      - ec2:DescribeNetworkAcls
                      - ec2:DescribeRouteTables
                    Resource: "*"
            - PolicyName: DynamoDBPermissions
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - dynamodb:PutItem
                      - dynamodb:Query
                    Resource: !GetAtt DynamoTableENIAnalysis.Arn
            - PolicyName: AssumeCrossAccountRole
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - sts:AssumeRole
                    Resource: arn:aws:iam::*:role/SgaCrossAccountEniLambda

    SgaGetEniLambda:
      Type: "AWS::Lambda::Function"
      Properties:
        Role: !GetAtt SgaGetEniLambdaIAMRole.Arn
        Handler: lambda_function.lambda_handler
        Environment:
          Variables:
            DB_TABLE: !Ref DynamoTableENIAnalysis
            # Define CROSS_ACCOUNT_ROLE_NAME here if you want to assume another role e.g. `ARN_ROLE: arn:aws:iam::<AccountNo>:role/<Role>`
            CROSS_ACCOUNT_ROLE_NAME: SgaCrossAccountEniLambda
        Runtime: python3.10
        Timeout: 300
        Code:
          S3Bucket: !ImportValue sga-resources-bucket-ref
          S3Key: KS-Test-SgaGetEniLambda-zTqrdlSrwIes-dd6156a0-4ad4-441c-b0ea-4ad738306e4d.zip

    SgaSortSGLambdaIAMRole:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Principal:
                  Service: lambda.amazonaws.com
                Action: sts:AssumeRole
          Path: /
          ManagedPolicyArns:
            - !Ref SgaCloudWatchLogsPolicy
          Policies:
            - PolicyName: DescribeSecurityGroupsPolicy
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - ec2:DescribeNetworkInterfaces
                      - ec2:DescribeTags
                      - ec2:DescribeNetworkAcls
                      - ec2:DescribeRouteTables
                    Resource: "*"
            - PolicyName: DynamoDBPermissions
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - dynamodb:PutItem
                      - dynamodb:Query
                    Resource: !GetAtt DynamoTableSortSG.Arn
            - PolicyName: AssumeCrossAccountRole
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - sts:AssumeRole
                    Resource: arn:aws:iam::*:role/SgaCrossAccountSgrIAMRole

    SgaSortSGLambda:
      Type: "AWS::Lambda::Function"
      Properties:
        Role: !GetAtt SgaSortSGLambdaIAMRole.Arn
        Handler: lambda_function.lambda_handler
        Environment:
          Variables:
            DB_TABLE: !Ref DynamoTableSortSG
            # Define CROSS_ACCOUNT_ROLE_NAME here if you want to assume another role e.g. `ARN_ROLE: arn:aws:iam::<AccountNo>:role/<Role>`
            CROSS_ACCOUNT_ROLE_NAME: SgaSortSGLambdaIAMRole
        Runtime: python3.10
        Timeout: 300
        Code:
          S3Bucket: !ImportValue sga-resources-bucket-ref
          S3Key: SortSecurityGroupReferences-33408ae9-78dc-426b-b200-36363544cffc.zip