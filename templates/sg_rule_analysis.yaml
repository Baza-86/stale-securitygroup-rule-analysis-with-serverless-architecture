AWSTemplateFormatVersion: "2010-09-09"
Description: "Template to create resources for Security Group rules analysis"
Parameters:
  SgaVpcFlowLogBucket:
    Type: String
    Description: The arn of the VPC flow log bucket
  GlueJobConcurrency:
    Type: Number
    Description: The maximum concurrency value for the Glue job analysis step
    Default: 10
Outputs:
  DynamoTableSGRules:
    Description: Name of the Security Group Rules Dynamo DB table
    Value: !Ref DynamoTableSGRules
  DynamoTableSGAnalysis:
    Description: Name of the Security Group Analysis Dynamo DB table
    Value: !Ref DynamoTableSGAnalysis
  DynamoTableENIAnalysis:
    Description: Name of the Security Group Elastic Network Interface Dynamo DB table
    Value: !Ref DynamoTableENIAnalysis
  DynamoTableSortSG:
    Description: Name of the sorted IP Addresses/Security Groups Dynamo DB table
    Value: !Ref DynamoTableSortSG
  StepFunctionsStateMachine:
    Description: Name of Step function
    Value: !Ref StepFunctionsStateMachine
  SgaGetSgLambda:
    Description: Name of the Get Security Groups Lambda
    Value: !Ref SgaGetSgLambda  
  SgaGetEniLambda:
    Description: Name of the Get Elastic Network Interfaces Lambda
    Value: !Ref SgaGetEniLambda
  SgaSortSGLambda:
    Description: Name of the Get Elastic Network Interfaces Lambda
    Value: !Ref SgaSortSGLambda




  
Resources:

    SgaCloudWatchLogsPolicy:
        Type: AWS::IAM::ManagedPolicy
        Properties:
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
          Description: Managed policy for CloudWatch Logs for use with the Security Group Analysis Solution
          Path: "/"
    
    SgaStepFunctionIAMRole:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Principal:
                  Service:
                  - states.amazonaws.com
                Action: sts:AssumeRole
          Path: /
          ManagedPolicyArns:
            - !Ref SgaCloudWatchLogsPolicy
          Policies:
            - PolicyName: SgaSfGlueJobPolicy
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - glue:StartJobRun
                      - glue:GetJobRun
                      - glue:GetJobRuns
                      - glue:BatchStopJobRun
                    Resource: "*"
            - PolicyName: SgaSfLambdaInvokePolicy
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - lambda:InvokeFunction
                    Resource:
                      - !GetAtt SgaGetSgLambda.Arn
                      - !GetAtt SgaGetEniLambda.Arn
                      - !GetAtt SgaSortSGLambda.Arn
                      - !GetAtt PayloadCreatorLambda.Arn
            - PolicyName: SgaSfCwlStepFunctions
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - logs:CreateLogDelivery
                      - logs:GetLogDelivery
                      - logs:UpdateLogDelivery
                      - logs:DeleteLogDelivery
                      - logs:ListLogDeliveries
                      - logs:PutResourcePolicy
                      - logs:DescribeResourcePolicies
                      - logs:DescribeLogGroups
                    Resource: "*"
            - PolicyName: StepFunctionAthenaPolicy
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - athena:StartQueryExecution
                      - athena:GetQueryRuntimeStatistics
                      - athena:GetQueryExecution
                      - athena:GetQueryResults
                      - glue:GetTable
                      - glue:GetPartitions
                    Resource: "*"
            - PolicyName: StepFunctionS3Access
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - s3:Get*
                      - s3:List*
                      - s3:PutObject
                    Resource:
                      - !ImportValue sga-athena-bucket-arn
                      - !Join
                          - ''
                          - - !ImportValue sga-athena-bucket-arn
                            - "/*"
                      - !Ref SgaVpcFlowLogBucket
                      - !Join
                          - ''
                          - - !Ref SgaVpcFlowLogBucket
                            - "/*"
            - PolicyName: StepFunctionInvokeStepFunction
              PolicyDocument: 
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - states:StartExecution
                    Resource: "*"


    SgaEventBridgeIAMManagedPolicy:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            Path: "/service-role/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "states:StartExecution"
                            ],
                            "Resource": [
                                "${StepFunctionsStateMachine}"
                            ]
                        }
                    ]
                }

    SgaEventBridgeIAMRole:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Principal:
                  Service:
                  - events.amazonaws.com
                Action: sts:AssumeRole
          Path: /
          ManagedPolicyArns:
            - !Ref SgaEventBridgeIAMManagedPolicy

    StepFuncLogGroup:
        Type: "AWS::Logs::LogGroup"

    DynamoTableSGRules:
        Type: "AWS::DynamoDB::Table"
        Properties:
          BillingMode: PAY_PER_REQUEST
          GlobalSecondaryIndexes:
            - IndexName: groups
              KeySchema:
              - AttributeName: group_id
                KeyType: HASH 
              Projection:
                ProjectionType: ALL
          AttributeDefinitions:
            - AttributeName: id
              AttributeType: S
            - AttributeName: group_id
              AttributeType: S
          KeySchema:
            - AttributeName: id
              KeyType: HASH

    DynamoTableSGAnalysis:
        Type: "AWS::DynamoDB::Table"
        Properties:
          BillingMode: PAY_PER_REQUEST
          GlobalSecondaryIndexes:
            - IndexName: rule_id_idx
              KeySchema:
              - AttributeName: rule_id
                KeyType: HASH
              - AttributeName: account_no
                KeyType: RANGE
              Projection:
                ProjectionType: INCLUDE
                NonKeyAttributes:
                  - used_times
          AttributeDefinitions:
            - AttributeName: sgr_flow_hash
              AttributeType: S
            - AttributeName: account_no
              AttributeType: S
            - AttributeName: rule_id
              AttributeType: S
          KeySchema:
            - AttributeName: sgr_flow_hash
              KeyType: HASH
            - AttributeName: account_no
              KeyType: RANGE
          
      
    DynamoTableENIAnalysis:
        Type: "AWS::DynamoDB::Table"
        Properties:
          BillingMode: PAY_PER_REQUEST
          AttributeDefinitions:
            - AttributeName: id
              AttributeType: S
          KeySchema:
            - AttributeName: id
              KeyType: HASH

    DynamoTableSortSG:
        Type: "AWS::DynamoDB::Table"
        Properties:
          BillingMode: PAY_PER_REQUEST
          AttributeDefinitions:
            - AttributeName: id
              AttributeType: S
          KeySchema:
            - AttributeName: id
              KeyType: HASH

    StepFunctionsStateMachine:
        Type: "AWS::StepFunctions::StateMachine"
        Properties:
            DefinitionString: !Sub 
              - |
                {
                  "StartAt": "ProcessItems",
                  "States": {
                    "ProcessItems": {
                      "Type": "Map",
                      "ItemsPath": "$.data",
                      "Iterator": {
                        "StartAt": "SkipLambdaExecution",
                        "States": {
                          "SkipLambdaExecution": {
                            "Type": "Choice",
                            "Choices": [
                              {
                                "Variable": "$.skipLambda",
                                "BooleanEquals": true,
                                "Next": "DateGenerator"
                              }
                            ],
                            "Default": "GetSG"
                          },
                          "GetSG": {
                            "Type": "Task",
                            "Resource": "${SgaGetSgLambda.Arn}",
                            "InputPath": "$",
                            "Retry": [
                              {
                                "ErrorEquals": [
                                  "Lambda.ServiceException",
                                  "Lambda.AWSLambdaException",
                                  "Lambda.SdkClientException",
                                  "Lambda.TooManyRequestsException"
                                ],
                                "IntervalSeconds": 2,
                                "MaxAttempts": 6,
                                "BackoffRate": 2
                              }
                            ],
                            "Next": "GetENI",
                            "ResultPath": null
                          },
                          "GetENI": {
                            "Type": "Task",
                            "Resource": "${SgaGetEniLambda.Arn}",
                            "InputPath": "$",
                            "Retry": [
                              {
                                "ErrorEquals": [
                                  "Lambda.ServiceException",
                                  "Lambda.AWSLambdaException",
                                  "Lambda.SdkClientException",
                                  "Lambda.TooManyRequestsException"
                                ],
                                "IntervalSeconds": 2,
                                "MaxAttempts": 6,
                                "BackoffRate": 2
                              }
                            ],
                            "Next": "SortSGs",
                            "ResultPath": null
                          },
                          "SortSGs": {
                            "Type": "Task",
                            "Resource": "${SgaSortSGLambda.Arn}",
                            "InputPath": "$",
                            "Retry": [
                              {
                                "ErrorEquals": [
                                  "Lambda.ServiceException",
                                  "Lambda.AWSLambdaException",
                                  "Lambda.SdkClientException",
                                  "Lambda.TooManyRequestsException"
                                ],
                                "IntervalSeconds": 2,
                                "MaxAttempts": 6,
                                "BackoffRate": 2
                              }
                            ],
                            "Next": "DateGenerator",
                            "ResultPath": null
                          },
                          "DateGenerator": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::aws-sdk:lambda:invoke",
                            "Parameters": {
                              "FunctionName": "${PayloadCreatorLambda.Arn}",
                              "Payload.$": "$"
                            },
                            "Retry": [
                              {
                                "ErrorEquals": [
                                  "Lambda.ServiceException",
                                  "Lambda.AWSLambdaException",
                                  "Lambda.SdkClientException",
                                  "Lambda.TooManyRequestsException"
                                ],
                                "IntervalSeconds": 2,
                                "MaxAttempts": 6,
                                "BackoffRate": 2
                              }
                            ],
                            "Next": "QueryParameters",
                            "ResultPath": "$.generatedDate",
                            "ResultSelector": {
                              "date.$": "States.StringToJson($.Payload)"
                            }
                          },
                          "QueryParameters": {
                            "Type": "Pass",
                            "Parameters": {
                              "queryParams": {
                                "queryString": "SELECT count(\"interface_id\") as flow_count, interface_id, protocol, flow_direction, if(\"flow_direction\"='ingress',\"srcaddr\",\"dstaddr\") as addr, dstport FROM \"vpcflowlogsathenadatabase\".\"{}\" WHERE dstport is not null and day='{}' and month='{}' and action='ACCEPT' group by interface_id, protocol, flow_direction, if(\"flow_direction\"='ingress',\"srcaddr\",\"dstaddr\"), dstport, dstport having count(interface_id) > 5  order by interface_id, flow_count desc offset {} limit {}",
                                "outputLocation": "s3://${AthenaBucket}/{}/{}/{}/{}/",
                                "queryOffset": 0,
                                "queryLimit": 40000
                              },
                              "outputFileArray": [],
                              "data.$": "$"
                            },
                            "Next": "Athena StartQueryExecution"
                          },
                          "Athena StartQueryExecution": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::athena:startQueryExecution.sync",
                            "Parameters": {
                              "QueryString.$": "States.Format($.queryParams.queryString, $.data.table, $.data.generatedDate.date.day, $.data.generatedDate.date.month, $.queryParams.queryOffset, $.queryParams.queryLimit)",
                              "WorkGroup": "primary",
                              "ResultConfiguration": {
                                "OutputLocation.$": "States.Format($.queryParams.outputLocation, $.data.path, $.data.generatedDate.date.year, $.data.generatedDate.date.month, $.data.generatedDate.date.day)"
                              }
                            },
                            "Next": "GetQueryRuntimeStatistics",
                            "ResultPath": "$.athenaQuery",
                            "ResultSelector": {
                              "queryExecutionId.$": "$.QueryExecution.QueryExecutionId",
                              "outputCsv.$": "States.Format('{}.csv',$.QueryExecution.QueryExecutionId)"
                            }
                          },
                          "GetQueryRuntimeStatistics": {
                            "Type": "Task",
                            "Next": "PayloadCreator",
                            "Parameters": {
                              "QueryExecutionId.$": "$.athenaQuery.queryExecutionId"
                            },
                            "Resource": "arn:aws:states:::aws-sdk:athena:getQueryRuntimeStatistics",
                            "ResultSelector": {
                              "outputRows.$": "$.QueryRuntimeStatistics.OutputStage.OutputRows"
                            },
                            "ResultPath": "$.queryRows"
                          },
                          "PayloadCreator": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::aws-sdk:lambda:invoke",
                            "Parameters": {
                              "FunctionName": "${PayloadCreatorLambda.Arn}",
                              "Payload": {
                                "outputCsv.$": "$.athenaQuery.outputCsv",
                                "queryParams.$": "$.queryParams",
                                "outputFileArray.$": "$.outputFileArray",
                                "outputRows.$": "$.queryRows.outputRows",
                                "generatedDate.$": "$.data.generatedDate"
                              }
                            },
                            "Retry": [
                              {
                                "ErrorEquals": [
                                  "Lambda.ServiceException",
                                  "Lambda.AWSLambdaException",
                                  "Lambda.SdkClientException",
                                  "Lambda.TooManyRequestsException"
                                ],
                                "IntervalSeconds": 2,
                                "MaxAttempts": 6,
                                "BackoffRate": 2
                              }
                            ],
                            "Next": "PayloadFormatter",
                            "ResultSelector": {
                              "lambdaResult.$": "States.StringToJson($.Payload)"
                            },
                            "ResultPath": "$.LambdaResult"
                          },
                          "PayloadFormatter": {
                            "Type": "Pass",
                            "Next": "Choice",
                            "Parameters": {
                              "queryParams.$": "$.LambdaResult.lambdaResult.queryParams",
                              "data.$": "$.data",
                              "outputRows.$": "$.LambdaResult.lambdaResult.outputRows",
                              "outputFileArray.$": "$.LambdaResult.lambdaResult.outputFileArray",
                              "generatedDate.$": "$.data.generatedDate"
                            }
                          },
                          "Choice": {
                            "Type": "Choice",
                            "Choices": [
                              {
                                "Variable": "$.outputRows",
                                "NumericEqualsPath": "$.queryParams.queryLimit",
                                "Next": "Athena StartQueryExecution"
                              }
                            ],
                            "Default": "AnalysisMap"
                          },
                          "AnalysisMap": {
                            "Type": "Map",
                            "ItemProcessor": {
                              "ProcessorConfig": {
                                "Mode": "INLINE"
                              },
                              "StartAt": "VpcFlowLogParser",
                              "States": {
                                "VpcFlowLogParser": {
                                  "Type": "Task",
                                  "Resource": "arn:aws:states:::glue:startJobRun.sync",
                                  "Parameters": {
                                    "JobName": "${SgaParseFlowLogsGlueJob}",
                                    "Arguments": {
                                      "--region.$": "$.data.region",
                                      "--outputCsv.$": "$.outputCsv",
                                      "--path.$": "$.data.path",
                                      "--accountNo.$": "$.data.AccountNo"
                                    }
                                  },
                                  "InputPath": "$",
                                  "End": true
                                }
                              }
                            },
                            "End": true,
                            "ItemsPath": "$.outputFileArray",
                            "ItemSelector": {
                              "data.$": "$.data",
                              "outputCsv.$": "$$.Map.Item.Value"
                            }
                          }
                        },
                        "ProcessorConfig": {
                          "Mode": "DISTRIBUTED",
                          "ExecutionType": "STANDARD"
                        }
                      },
                      "End": true,
                      "Label": "ProcessItems",
                      "MaxConcurrency": 10,
                      "ToleratedFailureCount": 9
                    }
                  }
                } 
              - AthenaBucket: !ImportValue sga-athena-bucket-ref
            RoleArn: !GetAtt SgaStepFunctionIAMRole.Arn
            StateMachineType: "STANDARD"
            LoggingConfiguration:
                Destinations: 
                  - CloudWatchLogsLogGroup: 
                        LogGroupArn: !GetAtt StepFuncLogGroup.Arn
                IncludeExecutionData: true
                Level: "ALL"
            
    EventsRule:
        Type: "AWS::Events::Rule"
        Properties:
            ScheduleExpression: "cron(00 10 ? * TUE-SAT *)"
            State: "ENABLED"
            Targets: 
                - 
                  Arn:
                    Fn::GetAtt:
                      - StepFunctionsStateMachine
                      - Arn
                  Id: 'SgaStepFunction'
                  RoleArn: !GetAtt 
                    - SgaEventBridgeIAMRole
                    - Arn
                  Input: |-
                    {
                      "data": [
                        {
                          "AccountNo": "012345678901",
                          "region": "eu-west-2",
                          "table": "SomeGlueTable",
                          "path": "path/path",
                          "skipLambda": false
                        }
                      ]
                    }
            EventBusName: "default"

    SgaStartAthenaQueryGlueJobIAMRole:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Principal:
                  Service: glue.amazonaws.com
                Action: sts:AssumeRole
          Path: /
          ManagedPolicyArns:
            - !Ref SgaCloudWatchLogsPolicy
          Policies:
            - PolicyName: GlueJobPolicy
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - athena:StartQueryExecution
                      - athena:GetQueryExecution
                      - athena:GetQueryResults
                      - glue:GetTable
                      - glue:GetPartitions
                    Resource: "*"
            - PolicyName: GlueJobS3Access
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - s3:Get*
                      - s3:List*
                      - s3:PutObject
                    Resource:
                      - !ImportValue sga-resources-bucket-arn
                      - !Join
                          - ''
                          - - !ImportValue sga-resources-bucket-arn
                            - "/*"
                      - !ImportValue sga-athena-bucket-arn
                      - !Join
                          - ''
                          - - !ImportValue sga-athena-bucket-arn
                            - "/*"
                      - !Ref SgaVpcFlowLogBucket
                      - !Join
                          - ''
                          - - !Ref SgaVpcFlowLogBucket
                            - "/*"

    SgaStartAthenaQueryGlueJob:
        Type: "AWS::Glue::Job"
        Properties:
            Description: "Job to run Athena query on VPC Flow logs and save to S3"
            Role: !GetAtt SgaStartAthenaQueryGlueJobIAMRole.Arn
            ExecutionProperty: 
                MaxConcurrentRuns: 1
            Command: 
                Name: "pythonshell"
                ScriptLocation: !Join
                                    - ''
                                    - - 's3://'
                                      - !ImportValue sga-resources-bucket-ref
                                      - '/scripts/'
                                      - 'query_athena.py'
                PythonVersion: "3.9"
            DefaultArguments: 
                --TempDir: !Join
                                - ''
                                - - 's3://'
                                  - !ImportValue sga-resources-bucket-ref
                                  - '/temporary/'
                --class: "GlueApp"
                --enable-glue-datacatalog: "true"
                --enable-job-insights: "false"
                --job-language: "python"
                --prebuilt-library-option: "prebuilt-library-enable"
                --region: !Ref "AWS::Region"
                --database: !ImportValue sga-glue-database-ref
                --table: "sg_analysis_rules_data"
                --bucket: !ImportValue sga-athena-bucket-ref
                --path: "path"
            MaxRetries: 1
            Timeout: 2880
            GlueVersion: "1.0"
            MaxCapacity: 0.0625

    SgaParseFlowLogsGlueJobIAMRole:
        Type: "AWS::IAM::Role"
        Properties:
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Principal:
                  Service: glue.amazonaws.com
                Action: sts:AssumeRole
          Path: /
          ManagedPolicyArns:
            - !Ref SgaCloudWatchLogsPolicy
          Policies:
              - PolicyName: GlueJobS3Access
                PolicyDocument:
                    Version: '2012-10-17'
                    Statement:
                      - Effect: Allow
                        Action:
                          - s3:Get*
                          - s3:HeadObject
                          - s3:List*
                        Resource:
                          - !ImportValue sga-resources-bucket-arn
                          - !Join
                              - ''
                              - - !ImportValue sga-resources-bucket-arn
                                - "/*"
                          - !ImportValue sga-athena-bucket-arn
                          - !Join
                              - ''
                              - - !ImportValue sga-athena-bucket-arn
                                - "/*"
              - PolicyName: GlueJobDynamoDBPolicy
                PolicyDocument:
                  Version: '2012-10-17'
                  Statement:
                    - Effect: Allow
                      Action:
                        - dynamodb:Query
                        - dynamodb:GetItem
                      Resource:
                        - !GetAtt DynamoTableSGRules.Arn
                        - !Join
                            - ''
                            - - !GetAtt DynamoTableSGRules.Arn
                              - "/*"
                        - !GetAtt DynamoTableENIAnalysis.Arn
                        - !Join
                            - ''
                            - - !GetAtt DynamoTableENIAnalysis.Arn
                              - "/*"
                        - !GetAtt DynamoTableSortSG.Arn
                        - !Join
                            - ''
                            - - !GetAtt DynamoTableSortSG.Arn
                              - "/*"
              - PolicyName: GlueJobDynamoDBReadWritePolicy
                PolicyDocument:
                  Version: '2012-10-17'
                  Statement:
                    - Effect: Allow
                      Action:
                        - dynamodb:PutItem
                        - dynamodb:GetItem
                        - dynamodb:UpdateItem
                        - dynamodb:Query
                      Resource: 
                        - !GetAtt DynamoTableSGAnalysis.Arn
                        - !Join
                            - ''
                            - - !GetAtt DynamoTableSGAnalysis.Arn
                              - "/*"
    
    SgaParseFlowLogsGlueJob:
        Type: "AWS::Glue::Job"
        Properties:
            Description: "Job to parse flow logs and calculate usage"
            Role: !GetAtt SgaParseFlowLogsGlueJobIAMRole.Arn
            ExecutionProperty: 
                MaxConcurrentRuns: !Ref GlueJobConcurrency
            Command: 
                Name: "pythonshell"
                ScriptLocation: !Join
                                    - ''
                                    - - 's3://'
                                      - !ImportValue sga-resources-bucket-ref
                                      - '/scripts/'
                                      - 'flow_logs_parser.py'
                PythonVersion: "3.9"
            DefaultArguments: 
                --class: "GlueApp"
                --enable-job-insights: "false"
                --extra-py-files: !Join
                                    - ''
                                    - - 's3://'
                                      - !ImportValue sga-resources-bucket-ref
                                      - '/libraries/'
                                      - 'awswrangler-2.14.0-py3-none-any.whl'
                --job-language: "python"
                --region: !Ref "AWS::Region"
                --FlowLogsAthenaResultsBucket: !ImportValue sga-athena-bucket-ref
                --SGRulesTable: !Ref DynamoTableSGRules
                --SGRulesGroupIndex: "groups"
                --SGSortTableName: !Ref DynamoTableSortSG
                --NICInterfaceTable: !Ref DynamoTableENIAnalysis
                --DynamoTableName: !Ref DynamoTableSGAnalysis
                --SGARulesUseIndex: "addr-id-index"
                --outputCsv: "ouputcsv"
                --path: "vpcflowlogs"
            MaxRetries: 1
            Timeout: 2880
            GlueVersion: "3.0"
            MaxCapacity: 1

    SgaGetSgLambdaIAMRole:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Principal:
                  Service: lambda.amazonaws.com
                Action: sts:AssumeRole
          Path: /
          ManagedPolicyArns:
            - !Ref SgaCloudWatchLogsPolicy
          Policies:
            - PolicyName: DescribeSecurityGroupsPolicy
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - ec2:DescribeSecurityGroups
                      - ec2:DescribeSecurityGroupReferences
                      - ec2:DescribeSecurityGroupRules
                    Resource: "*"
            - PolicyName: DynamoDBPermissions
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - dynamodb:PutItem
                      - dynamodb:Query
                    Resource: !GetAtt DynamoTableSGRules.Arn
            - PolicyName: AssumeCrossAccountRole
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - sts:AssumeRole
                    Resource: arn:aws:iam::*:role/SgaCrossAccountSecurityGroupLambda

    SgaGetSgLambda:
      Type: "AWS::Lambda::Function"
      Properties:
        Role: !GetAtt SgaGetSgLambdaIAMRole.Arn
        Handler: lambda_function.lambda_handler
        Environment:
          Variables:
            DB_TABLE: !Ref DynamoTableSGRules
            # Define CROSS_ACCOUNT_ROLE_NAME here if you want to assume another role e.g. `ARN_ROLE: arn:aws:iam::<AccountNo>:role/<Role>`
            CROSS_ACCOUNT_ROLE_NAME: SgaCrossAccountSecurityGroupLambda
        Runtime: python3.10
        Timeout: 300
        Code:
          S3Bucket: !ImportValue sga-resources-bucket-ref
          S3Key: SgaGetSgLambda-FU23JMQzQK3h-b0d41471-bd70-4a45-9548-4fa7e8e2c158.zip

    SgaGetEniLambdaIAMRole:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Principal:
                  Service: lambda.amazonaws.com
                Action: sts:AssumeRole
          Path: /
          ManagedPolicyArns:
            - !Ref SgaCloudWatchLogsPolicy
          Policies:
            - PolicyName: DescribeSecurityGroupsPolicy
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - ec2:DescribeNetworkInterfaces
                      - ec2:DescribeTags
                      - ec2:DescribeNetworkAcls
                      - ec2:DescribeRouteTables
                    Resource: "*"
            - PolicyName: DynamoDBPermissions
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - dynamodb:PutItem
                      - dynamodb:Query
                    Resource: !GetAtt DynamoTableENIAnalysis.Arn
            - PolicyName: AssumeCrossAccountRole
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - sts:AssumeRole
                    Resource: arn:aws:iam::*:role/SgaCrossAccountEniLambda

    SgaGetEniLambda:
      Type: "AWS::Lambda::Function"
      Properties:
        Role: !GetAtt SgaGetEniLambdaIAMRole.Arn
        Handler: lambda_function.lambda_handler
        Environment:
          Variables:
            DB_TABLE: !Ref DynamoTableENIAnalysis
            # Define CROSS_ACCOUNT_ROLE_NAME here if you want to assume another role e.g. `ARN_ROLE: arn:aws:iam::<AccountNo>:role/<Role>`
            CROSS_ACCOUNT_ROLE_NAME: SgaCrossAccountEniLambda
        Runtime: python3.10
        Timeout: 300
        Code:
          S3Bucket: !ImportValue sga-resources-bucket-ref
          S3Key: SgaGetEniLambda-zTqrdlSrwIes-dd6156a0-4ad4-441c-b0ea-4ad738306e4d.zip

    SgaSortSGLambdaIAMRole:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Principal:
                  Service: lambda.amazonaws.com
                Action: sts:AssumeRole
          Path: /
          ManagedPolicyArns:
            - !Ref SgaCloudWatchLogsPolicy
          Policies:
            - PolicyName: DescribeSecurityGroupsPolicy
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - ec2:DescribeNetworkInterfaces
                      - ec2:DescribeTags
                      - ec2:DescribeNetworkAcls
                      - ec2:DescribeRouteTables
                    Resource: "*"
            - PolicyName: DynamoDBPermissions
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - dynamodb:PutItem
                      - dynamodb:Query
                    Resource: !GetAtt DynamoTableSortSG.Arn
            - PolicyName: AssumeCrossAccountRole
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - sts:AssumeRole
                    Resource: arn:aws:iam::*:role/SgaCrossAccountSgrIAMRole

    SgaSortSGLambda:
      Type: "AWS::Lambda::Function"
      Properties:
        Role: !GetAtt SgaSortSGLambdaIAMRole.Arn
        Handler: lambda_function.lambda_handler
        Environment:
          Variables:
            DB_TABLE: !Ref DynamoTableSortSG
            # Define CROSS_ACCOUNT_ROLE_NAME here if you want to assume another role e.g. `ARN_ROLE: arn:aws:iam::<AccountNo>:role/<Role>`
            CROSS_ACCOUNT_ROLE_NAME: SgaCrossAccountSgrIAMRole
        Runtime: python3.10
        MemorySize: 256
        Timeout: 900
        Code:
          S3Bucket: !ImportValue sga-resources-bucket-ref
          S3Key: SortSecurityGroupReferences-hQooYb3bJ2Hs-ede521f8-c55a-4e61-9bee-151852f99a64.zip

    PayloadCreatorRole:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Principal:
                  Service: lambda.amazonaws.com
                Action: sts:AssumeRole
          Path: /
          ManagedPolicyArns:
            - !Ref SgaCloudWatchLogsPolicy

    PayloadCreatorLambda:
      Type: "AWS::Lambda::Function"
      Properties:
        Role: !GetAtt PayloadCreatorRole.Arn
        Handler: lambda_function.lambda_handler
        Runtime: python3.10
        Code:
          S3Bucket: !ImportValue sga-resources-bucket-ref
          S3Key: PayloadCreatorLambda-h4v5b6lMGO1f-6fa45f3b-0f8b-4e4f-bfbb-89d1238ed13a.zip