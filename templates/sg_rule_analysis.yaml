AWSTemplateFormatVersion: "2010-09-09"
Description: "Template to create resources for Security Group rules analysis"
Resources:

    SgaCloudWatchLogsPolicy:
        Type: AWS::IAM::ManagedPolicy
        Properties:
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
          Description: Managed policy for CloudWatch Logs for use with the Security Group Analysis Solution
          Path: "/"
    
    SgaStepFunctionIAMRole:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Principal:
                  Service: states.amazonaws.com
                Action: sts:AssumeRole
          Path: /
          ManagedPolicyArns:
            - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
            - !Ref SgaCloudWatchLogsPolicy
          Policies:
            - PolicyName: SgaSfLambdaInvokePolicy
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - lambda:InvokeFunction
                    Resource:
                      - !GetAtt SgaGetSgLambda.Arn
                      - !GetAtt SgaGetEniLambda.Arn
            - PolicyName: SgaSfCwlStepFunctions
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - logs:CreateLogDelivery
                      - logs:GetLogDelivery
                      - logs:UpdateLogDelivery
                      - logs:DeleteLogDelivery
                      - logs:ListLogDeliveries
                      - logs:PutResourcePolicy
                      - logs:DescribeResourcePolicies
                      - logs:DescribeLogGroups
                    Resource: "*"

    IAMManagedPolicy:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            Path: "/service-role/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "states:StartExecution"
                            ],
                            "Resource": [
                                "${StepFunctionsStateMachine}"
                            ]
                        }
                    ]
                }

    StepFuncLogGroup:
        Type: "AWS::Logs::LogGroup"
        Properties:
            LogGroupName: "/aws/vendedlogs/states/sg-analysis-step-function-logs_KS"

    DynamoTableSGRules:
        Type: "AWS::DynamoDB::Table"
        Properties:
          GlobalSecondaryIndexes:
            - IndexName: groups
              KeySchema:
              - AttributeName: group_id
                KeyType: HASH 
              Projection:
                ProjectionType: ALL
              ProvisionedThroughput:
                ReadCapacityUnits: 5
                WriteCapacityUnits: 5
          AttributeDefinitions:
            - AttributeName: id
              AttributeType: S
            - AttributeName: group_id
              AttributeType: S
          KeySchema:
            - AttributeName: id
              KeyType: HASH
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5

    DynamoTableSGAnalysis:
        Type: "AWS::DynamoDB::Table"
        Properties:
          GlobalSecondaryIndexes:
            - IndexName: protocol
              KeySchema:
              - AttributeName: sg_id
                KeyType: HASH 
              - AttributeName: protocol
                KeyType: RANGE
              Projection:
                ProjectionType: ALL
              ProvisionedThroughput:
                ReadCapacityUnits: 5
                WriteCapacityUnits: 5
          AttributeDefinitions:
            - AttributeName: sgr_flow_hash
              AttributeType: S
            - AttributeName: sg_id
              AttributeType: S
            - AttributeName: protocol
              AttributeType: S
          KeySchema:
            - AttributeName: sgr_flow_hash
              KeyType: HASH
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      
    DynamoTableENIAnalysis:
        Type: "AWS::DynamoDB::Table"
        Properties:
          AttributeDefinitions:
            - AttributeName: id
              AttributeType: S
          KeySchema:
            - AttributeName: id
              KeyType: HASH
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5

    StepFunctionsStateMachine:
        Type: "AWS::StepFunctions::StateMachine"
        Properties:
            StateMachineName: !Ref EventsRule
            DefinitionString: !Sub |
                {
                  "Comment": "A description of my state machine",
                  "StartAt": "Lambda GetSG",
                  "States": {
                    "Lambda GetSG": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::lambda:invoke",
                      "OutputPath": "$.Payload",
                      "Parameters": {
                        "Payload.$": "$",
                        "FunctionName": "${SgaGetSgLambda.Arn}"
                      },
                      "Retry": [
                        {
                          "ErrorEquals": [
                            "Lambda.ServiceException",
                            "Lambda.AWSLambdaException",
                            "Lambda.SdkClientException",
                            "Lambda.TooManyRequestsException"
                          ],
                          "IntervalSeconds": 2,
                          "MaxAttempts": 6,
                          "BackoffRate": 2
                        }
                      ],
                      "Next": "Lambda GetEni"
                    },
                    "Lambda GetEni": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::lambda:invoke",
                      "OutputPath": "$.Payload",
                      "Parameters": {
                        "Payload.$": "$",
                        "FunctionName": "${SgaGetEniLambda.Arn}"
                      },
                      "Retry": [
                        {
                          "ErrorEquals": [
                            "Lambda.ServiceException",
                            "Lambda.AWSLambdaException",
                            "Lambda.SdkClientException",
                            "Lambda.TooManyRequestsException"
                          ],
                          "IntervalSeconds": 2,
                          "MaxAttempts": 6,
                          "BackoffRate": 2
                        }
                      ],
                      "Next": "Glue QueryVPCFlowLogsSaveToS3"
                    },
                    "Glue QueryVPCFlowLogsSaveToS3": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::glue:startJobRun.sync",
                      "Parameters": {
                        "JobName": "${SgaStartAthenaQueryGlueJob}"
                      },
                      "Next": "Glue ParseVPCFLowLogsSaveUsageCount"
                    },
                    "Glue ParseVPCFLowLogsSaveUsageCount": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::glue:startJobRun.sync",
                      "Parameters": {
                        "JobName": "${SgaParseFlowLogsGlueJob}"
                      },
                      "End": true
                    }
                  }
                }
            RoleArn: !GetAtt SgaStepFunctionIAMRole.Arn
            StateMachineType: "STANDARD"
            LoggingConfiguration:
                Destinations: 
                  - CloudWatchLogsLogGroup: 
                        LogGroupArn: !GetAtt StepFuncLogGroup.Arn
                IncludeExecutionData: true
                Level: "ALL"
            
    EventsRule:
        Type: "AWS::Events::Rule"
        Properties:
            Name: "sg-analysis-step-function-ks"
            ScheduleExpression: "cron(0 9 * * ? *)"
            State: "DISABLED"
            Targets: 
              - 
                Arn: !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:sg-analysis-step-function"
                Id: "Id70bcbcb6-9bda-4f24-8f45-8f3dbb65692c"
                RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/service-role/SG_Analysis_Amazon_EventBridge_Invoke_Step_Functions"
            EventBusName: "default"

    SgaStartAthenaQueryGlueJobIAMRole:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Principal:
                  Service: glue.amazonaws.com
                Action: sts:AssumeRole
          Path: /
          ManagedPolicyArns:
            - !Ref SgaCloudWatchLogsPolicy
          Policies:
            - PolicyName: GlueJobPolicy
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - athena:StartQueryExecution
                      - athena:GetQueryExecution
                      - athena:GetQueryResults
                    Resource: "*"
            - PolicyName: GlueJobS3Access
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - s3:Get*
                      - s3:HeadObject
                      - s3:List*
                    Resource:
                      - !ImportValue sga-resources-bucket-arn
                      - !Join
                          - ''
                          - - !ImportValue sga-resources-bucket-arn
                            - "/*"
                      - !ImportValue sga-athena-bucket-arn
                      - !Join
                          - ''
                          - - !ImportValue sga-athena-bucket-arn
                            - "/*"

    SgaStartAthenaQueryGlueJob:
        Type: "AWS::Glue::Job"
        Properties:
            Description: "Job to run Athena query on VPC Flow logs and save to S3"
            Role: !GetAtt SgaStartAthenaQueryGlueJobIAMRole.Arn
            ExecutionProperty: 
                MaxConcurrentRuns: 1
            Command: 
                Name: "pythonshell"
                ScriptLocation: !Join
                                    - ''
                                    - - 's3://'
                                      - !ImportValue sga-resources-bucket-ref
                                      - '/scripts/'
                                      - 'query_athena.py'
                PythonVersion: "3.9"
            DefaultArguments: 
                --TempDir: !Join
                                - ''
                                - - 's3://'
                                  - !ImportValue sga-resources-bucket-ref
                                  - '/temporary/'
                --class: "GlueApp"
                --enable-glue-datacatalog: "true"
                --enable-job-insights: "false"
                --job-language: "python"
                --prebuilt-library-option: "prebuilt-library-enable"
                --region: "eu-west-2"
                --database: "sg_analysis_rules_data_ks"
                --table: "sg_analysis_rules_data_ks"
                --bucket: "sga-buckets-sgas3bucketathena-1oadk3sp8xq5n"
                --path: "path"
            MaxRetries: 1
            Timeout: 2880
            GlueVersion: "1.0"
            MaxCapacity: 0.0625

    SgaParseFlowLogsGlueJobIAMRole:
        Type: "AWS::IAM::Role"
        Properties:
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Principal:
                  Service: glue.amazonaws.com
                Action: sts:AssumeRole
          Path: /
          ManagedPolicyArns:
            - !Ref SgaCloudWatchLogsPolicy
          Policies:
              - PolicyName: GlueJobS3Access
                PolicyDocument:
                    Version: '2012-10-17'
                    Statement:
                      - Effect: Allow
                        Action:
                          - s3:Get*
                          - s3:HeadObject
                          - s3:List*
                        Resource:
                          - !ImportValue sga-resources-bucket-arn
                          - !Join
                              - ''
                              - - !ImportValue sga-resources-bucket-arn
                                - "/*"
                          - !ImportValue sga-athena-bucket-arn
                          - !Join
                              - ''
                              - - !ImportValue sga-athena-bucket-arn
                                - "/*"
              - PolicyName: GlueJobDynamoDBPolicy
                PolicyDocument:
                  Version: '2012-10-17'
                  Statement:
                    - Effect: Allow
                      Action:
                        - dynamodb:Query
                        - dynamodb:GetItem
                      Resource:
                        - !GetAtt DynamoTableSGRules.Arn
                        - !GetAtt DynamoTableENIAnalysis.Arn
              - PolicyName: GlueJobDynamoDBReadWritePolicy
                PolicyDocument:
                  Version: '2012-10-17'
                  Statement:
                    - Effect: Allow
                      Action:
                        - dynamodb:PutItem
                        - dynamodb:GetItem
                        - dynamodb:UpdateItem
                      Resource: !GetAtt DynamoTableSGAnalysis.Arn
    
    SgaParseFlowLogsGlueJob:
        Type: "AWS::Glue::Job"
        Properties:
            Description: "Job to parse flow logs and calculate usage"
            Role: !GetAtt SgaParseFlowLogsGlueJobIAMRole.Arn
            ExecutionProperty: 
                MaxConcurrentRuns: 1
            Command: 
                Name: "pythonshell"
                ScriptLocation: !Join
                                    - ''
                                    - - 's3://'
                                      - !ImportValue sga-resources-bucket-ref
                                      - '/scripts/'
                                      - 'flow_logs_parser.py'
                PythonVersion: "3.9"
            DefaultArguments: 
                --class: "GlueApp"
                --enable-job-insights: "false"
                --extra-py-files: !Join
                                    - ''
                                    - - 's3://'
                                      - !ImportValue sga-resources-bucket-ref
                                      - '/libraries/'
                                      - 'awswrangler-2.14.0-py3-none-any.whl'
                --job-language: "python"
            MaxRetries: 1
            Timeout: 2880
            GlueVersion: "1.0"
            MaxCapacity: 1

    SgaGetSgLambdaIAMRole:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Principal:
                  Service: lambda.amazonaws.com
                Action: sts:AssumeRole
          Path: /
          ManagedPolicyArns:
            - !Ref SgaCloudWatchLogsPolicy
          Policies:
            - PolicyName: DescribeSecurityGroupsPolicy
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - ec2:DescribeSecurityGroups
                      - ec2:DescribeSecurityGroupReferences
                      - ec2:DescribeSecurityGroupRules
                    Resource: "*"
            - PolicyName: DynamoDBPermissions
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - dynamodb:PutItem
                      - dynamodb:Query
                    Resource: !GetAtt DynamoTableSGRules.Arn

    SgaGetSgLambda:
      Type: "AWS::Lambda::Function"
      Properties:
        Role: !GetAtt SgaGetSgLambdaIAMRole.Arn
        Handler: lambda_function.lambda_handler
        Environment:
          Variables:
            DB_TABLE: !Ref DynamoTableSGRules
            # Define ROLE_ARN here if you want to assume another account e.g. `ARN_ROLE: arn:aws:iam::<AccountNo>:role/<Role>`
            ARN_ROLE: arn:aws:iam::019050653029:role/security-group-monitoring-lambda-get-sg-role
        Runtime: python3.10
        Timeout: 300
        Code:
          S3Bucket: !ImportValue sga-resources-bucket-ref
          S3Key: KS-Test-SgaGetSgLambda-FU23JMQzQK3h-5039b3ae-2980-4eeb-b4db-8e79c04a72d6.zip

    SgaGetEniLambdaIAMRole:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Principal:
                  Service: lambda.amazonaws.com
                Action: sts:AssumeRole
          Path: /
          ManagedPolicyArns:
            - !Ref SgaCloudWatchLogsPolicy
          Policies:
            - PolicyName: DescribeSecurityGroupsPolicy
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - ec2:DescribeNetworkInterfaces
                      - ec2:DescribeTags
                      - ec2:DescribeNetworkAcls
                      - ec2:DescribeRouteTables
                    Resource: "*"
            - PolicyName: DynamoDBPermissions
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - dynamodb:PutItem
                      - dynamodb:Query
                    Resource: !GetAtt DynamoTableENIAnalysis.Arn

    SgaGetEniLambda:
      Type: "AWS::Lambda::Function"
      Properties:
        Role: !GetAtt SgaGetEniLambdaIAMRole.Arn
        Handler: lambda_function.lambda_handler
        Environment:
          Variables:
            DB_TABLE: !Ref DynamoTableENIAnalysis
            # Define ROLE_ARN here if you want to assume another account e.g. `ARN_ROLE: arn:aws:iam::<AccountNo>:role/<Role>`
            ARN_ROLE: arn:aws:iam::019050653029:role/security-group-monitoring-lambda-get-sg-role
        Runtime: python3.10
        Timeout: 300
        Code:
          S3Bucket: !ImportValue sga-resources-bucket-ref
          S3Key: KS-Test-SgaGetEniLambda-zTqrdlSrwIes-4a6b52c6-9f45-4a23-9866-1f615ef543ef.zip
